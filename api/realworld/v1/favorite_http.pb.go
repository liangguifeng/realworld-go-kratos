// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFavoriteFavoriteArticle = "/realworld.v1.Favorite/FavoriteArticle"
const OperationFavoriteUnFavoriteArticle = "/realworld.v1.Favorite/UnFavoriteArticle"

type FavoriteHTTPServer interface {
	FavoriteArticle(context.Context, *FavoriteArticleRequest) (*FavoriteArticleResponse, error)
	UnFavoriteArticle(context.Context, *UnFavoriteArticleRequest) (*UnFavoriteArticleResponse, error)
}

func RegisterFavoriteHTTPServer(s *http.Server, srv FavoriteHTTPServer) {
	r := s.Route("/")
	r.POST("/api/articles/{slug}/favorite", _Favorite_FavoriteArticle0_HTTP_Handler(srv))
	r.DELETE("/api/articles/{slug}/favorite", _Favorite_UnFavoriteArticle0_HTTP_Handler(srv))
}

func _Favorite_FavoriteArticle0_HTTP_Handler(srv FavoriteHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FavoriteArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFavoriteFavoriteArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FavoriteArticle(ctx, req.(*FavoriteArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FavoriteArticleResponse)
		return ctx.Result(200, reply)
	}
}

func _Favorite_UnFavoriteArticle0_HTTP_Handler(srv FavoriteHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UnFavoriteArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFavoriteUnFavoriteArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UnFavoriteArticle(ctx, req.(*UnFavoriteArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UnFavoriteArticleResponse)
		return ctx.Result(200, reply)
	}
}

type FavoriteHTTPClient interface {
	FavoriteArticle(ctx context.Context, req *FavoriteArticleRequest, opts ...http.CallOption) (rsp *FavoriteArticleResponse, err error)
	UnFavoriteArticle(ctx context.Context, req *UnFavoriteArticleRequest, opts ...http.CallOption) (rsp *UnFavoriteArticleResponse, err error)
}

type FavoriteHTTPClientImpl struct {
	cc *http.Client
}

func NewFavoriteHTTPClient(client *http.Client) FavoriteHTTPClient {
	return &FavoriteHTTPClientImpl{client}
}

func (c *FavoriteHTTPClientImpl) FavoriteArticle(ctx context.Context, in *FavoriteArticleRequest, opts ...http.CallOption) (*FavoriteArticleResponse, error) {
	var out FavoriteArticleResponse
	pattern := "/api/articles/{slug}/favorite"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFavoriteFavoriteArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FavoriteHTTPClientImpl) UnFavoriteArticle(ctx context.Context, in *UnFavoriteArticleRequest, opts ...http.CallOption) (*UnFavoriteArticleResponse, error) {
	var out UnFavoriteArticleResponse
	pattern := "/api/articles/{slug}/favorite"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFavoriteUnFavoriteArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
