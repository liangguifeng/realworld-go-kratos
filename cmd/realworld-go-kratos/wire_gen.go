// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"realworld-go-kratos/internal/biz"
	"realworld-go-kratos/internal/conf"
	"realworld-go-kratos/internal/data"
	"realworld-go-kratos/internal/server"
	"realworld-go-kratos/internal/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData)
	client := data.NewRedis(confData)
	dataData, cleanup, err := data.NewData(confData, db, client, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepositoryIface := data.NewUserRepository(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepositoryIface, logger)
	userService := service.NewUserService(userUsecase, logger)
	articleRepositoryIface := data.NewArticleRepository(dataData, logger)
	articleUsecase := biz.NewArticleUsecase(articleRepositoryIface, logger)
	articleService := service.NewArticleService(articleUsecase, logger)
	commentRepositoryIface := data.NewCommentRepository(dataData, logger)
	commentUsecase := biz.NewCommentUsecase(commentRepositoryIface, logger)
	commentService := service.NewCommentService(commentUsecase, logger)
	favoriteRepositoryIface := data.NewFavoriteRepository(dataData, logger)
	favoriteUsecase := biz.NewFavoriteUsecase(favoriteRepositoryIface, logger)
	favoriteService := service.NewFavoriteService(favoriteUsecase, logger)
	tagRepositoryIface := data.NewTagRepository(dataData, logger)
	tagUsecase := biz.NewTagUsecase(tagRepositoryIface, logger)
	tagService := service.NewTagService(tagUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, userService, articleService, commentService, favoriteService, tagService, logger)
	grpcServer := server.NewGRPCServer(confServer, userService, articleService, commentService, favoriteService, tagService, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
